/**
 * Module for easily storing script preferences.
 * @param fname File name for the saved preferences "JSON-like" file.
 * @param location Optional folder location to save the preferences file. Defaults to `Folder.userData`.
 * @param version Optional script version number to include in the preferences file. Helps with debugging.
 */
function Prefs(fname, location, version) {
  // if `fname` is not specified, pull the base script name from the stack
  if (fname == "undefined") {
    var stack = $.stack.split("\n");
    var foo, bar;
    for (var i = 0; i < stack.length; i++) {
      foo = stack[i];
      if (foo[0] == "[" && foo[foo.length - 1] == "]") {
        bar = foo.slice(1, foo.length - 1);
        if (isNaN(bar)) {
          fname = bar + ".json";
          break;
        }
      }
    }
  }
  this.fname = fname;
  this.location = typeof location !== "undefined" ? location : Folder.userData;
  this.version = typeof version !== "undefined" ? version : null;
  this.data = {};
}

Prefs.prototype = {
  /**
   * Preferences folder object.
   */
  folder: function () {
    return new Folder(this.location);
  },
  /**
   * Preferences file object.
   */
  file: function () {
    var folder = this.folder();
    return new File(folder + "/" + this.fname + ".json");
  },
  /**
   * Load preferences file data into the `prefs.data` object.
   * @param defaultData Default data to load if the data file does not exist.
   */
  load: function (defaultData) {
    defaultData = typeof defaultData !== "undefined" ? defaultData : {};
    var file = this.file();
    var json;

    if (file.exists) {
      try {
        json = readJSONData(file);
      } catch (e) {
        file.rename(file.name + ".bak");
        this.reveal();
        Error.runtimeError(1, "Error!\nPreferences file error. Backup created.");
      }
    } else {
      json = {};
      json.data = defaultData;
    }

    this.data = json.data;
  },
  /**
   * Write preferences to disk. Only `prefs.data` will be saved.
   */
  save: function () {
    var folder = this.folder();
    var file = this.file();
    var d = {
      data: this.data,
      version: this.version,
      timestamp: Date.now(),
    };
    if (!folder.exists) folder.create();
    writeJSONData(d, file);
  },
  /**
   * Backup the prefs file.
   */
  backup: function () {
    var file = this.file();
    var backupFile = new File(file + ".bak");
    file.copy(backupFile);
  },
  /**
   * Reveal the preferences file in the platform-specific file browser.
   */
  reveal: function () {
    var folder = this.folder();
    folder.execute();
  },
};
